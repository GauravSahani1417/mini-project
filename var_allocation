#include <stdio.h>
int var_count=101;
int week[46],week_n[46];
int task[2][3];
int as[100],ad[100];
int s[100],sd[100],filled[100];
int Sorted[100];
int a[100],count,countad,filled_c,valid;

void main()
{
    
    intialise();
    print();
    fixedinput();
    print();
    getTasks();
    PrintTasks();
    
    for(int i=0;i<=2;i++){
        AllocateTasks(i);
        for(int j=0;j<=99;j++){
            as[j]=s[j]=ad[j]=sd[j]=filled[j]=Sorted[j]=a[j]=0;
            
        }
    }
    
    print_n();
}

void allocate(int f,int l,int left,int right,int current){
    printf("allocate");
    char c1,c2,c3;
    if(left>0){
        c1='S';
    }else{
        
        c1='R';  
    }
    
    if(task[current][0]>0){
        c2='S';
       
    }else{
        c2='R'; 
    }
    
    if(right>0){
        c3='S';
        
    }else{
        c3='R'; 
    }
    
    
    
    
    
    
    
    if((c1=='S' && c2=='S' && c3=='S') ||(c1=='R' && c2=='R' && c3=='R') ){
        
    }
    else if(c1=='S' && c2=='R' && c3=='S'){
        if(left>=right){
            //from left
            for(int i=f;i<=f+task[current][1]-1;i++){
                week[i]=task[current][0];
                week_n[i]=var_count;
            }
        }
        else if(left<right){
            //from right
            for(int i=l;i>=l-task[current][1]+1;i--){
                week[i]=task[current][0];
                week_n[i]=var_count;
            }
        }
       
        
    }
    else if(c1=='S' && c2=='S' && c3=='R'){
        for(int i=l;i>=l-task[current][1]+1;i--){
            week[i]=task[current][0];
            week_n[i]=var_count;
        }
    }
    else if(c1=='S' && c2=='R' && c3=='S'){
        
    }
    else if(c1=='S' && c2=='R' && c3=='R'){
        for(int i=f;i<=f+task[current][1]-1;i++){
            week[i]=task[current][0];
            week_n[i]=var_count;
        }
    }
    
    
    else if(c1=='R' && c2=='S' && c3=='S'){
        for(int i=f;i<=f+task[current][1]-1;i++){
            week[i]=task[current][0];
            week_n[i]=var_count;
        }
    }
    else if(c1=='R' && c2=='S' && c3=='R'){
         if(left<=right){
            //from left
            for(int i=f;i<=f+task[current][1]-1;i++){
                week[i]=task[current][0];
                week_n[i]=var_count;
            }
        }
        else if(left>right){
            //from right
            for(int i=l;i>=l-task[current][1]+1;i--){
                week[i]=task[current][0];
                week_n[i]=var_count;
            }
        }
       
    }
    else if(c1=='R' && c2=='R' && c3=='S'){
        printf("hit case");
        for(int i=l;i>=l-task[current][1]+1;i--){
            week[i]=task[current][0];
            week_n[i]=var_count;
        }
    }
  
    
} 

int check(int countad){
    
    for(int i=0;i<=countad;i++){
        if(task[0][1]<=ad[i]){
           return i;
           
        }
    }
    
    return 999;
}

PrintABL(int countsd){
    printf("Available Block Overall Levels : \n");
    for(int i=0;i<=countsd;i++){
        printf("%d  ",sd[i]);
    }
    printf("\n\n");
}

void AvailBlockLevel(int count){
    int j=0;
    for(int i=0;i<=count;i=i+2,j++){
        sd[j]=s[i]+s[i+1];
    }
}

void PrintSL(int count){
    printf("Surrounding Levels : \n");
    for(int i=0;i<=count;i++){
        printf("%d  ",s[i]);
    }
    printf("\n\n");
}

void SurroundingLevels(int count){
   int current;
   for(int i=0;i<=45;i++){
       if(week_n[i]!=999){
           current=week_n[i];
           break;
       }
   }
    printf("current : %d\n",current);
    
    int counter=0;
    for(int i=0;i<=count;i=i+2){
        if(as[i]==0){
            //exceptional starting case
            s[i]=0;
            s[i+1]=week[as[i+1]+1]*filled[counter];

        }
        else if(as[i]==46){
            //excetional ending case
            s[i]=week[as[i]-1]*filled[counter];
            s[i+1]=0;
        }
        else{
            //regular cases
            if(current!=week_n[as[i]-1]){
                current=week_n[as[i]-1];
                counter++;
            }
            s[i]=week[as[i]-1]*filled[counter];
            
            if(current!=week_n[as[i+1]+1]){
                current=week_n[as[i+1]+1];
                counter++;
            }
            s[i+1]=week[as[i+1]+1]*filled[counter];
        }
    }
}

void PrintFilledAllocations(int filled_c){
    printf("Filled Allocations durations : \n");
    for(int i=0;i<filled_c;i++){
        printf("%d  ",filled[i]);
    }
    printf("\n\n");
}

int getfilledallocations(){
    int val,count=0,found=0,j=0;
    
    for(int i=0;i<=45;i++){
        
        if(week[i]!=999){
            if(found==0){
                val=week[i];
                found=1;
            }
            
            if(found==1 && week[i]==val){
                count++;
            }
            else if(found==1 && week[i]!=val){
                if(week[i]==999){
                    found=0;
                    filled[j]=count;
                    count=0;
                    j++;
                }
                else{
                    //some other task
                    found=1;
                    val=week[i];
                    filled[j]=count;
                    count=1;
                    j++;
                    
                }
                
            }
            
        }
        
        else{
            if(found==1){
                found=0;
                filled[j]=count;
                count=0;
                j++;
                
            }
        }
    }  
    return j;
    
}

void printad(int countad){
    printf("Available space durations : \n");
    for(int i=0;i<=countad;i++){
        printf("%d  ",ad[i]);
    }
     printf("\n\n");
}

int calculatead(int count){
    int countad;
    countad=count/2;
    int j=0;
    for(int i=0;i<=count;i=i+2,j++){
        
       ad[j]=as[i+1]-as[i]+1;
       
    }
    
    
    
    return countad;
}

void printavail(int count){
    printf("Available space : \n");
    for(int i=0;i<=count;i++){
        printf("%d  ",as[i]);
    }
    printf("\n\n");
    
}

int availibility(){
    
        int count=0;
        int first=0;
        
        for(int i=0;i<=45;i++){
        	if(week[i]==999 && first==0){
        		
            
            	as[count]=i;
            	count++;
            	first=1;
            	
        	}
        	
        	if(week[i]!=999 && first==1){
        	    
        		as[count]=i-1;
        		count++;
        		first=0;
        	}
        		
        	//exception
        	if(i==45 && first==1){
        		as[count]=45;
        	}
        	
        	
        }
    return count;
}

void print(){
    for(int i=0;i<=45;i++){
        printf("%d  ",week[i]);
    }
    printf("\n\n");
}

void print_n(){
    for(int i=0;i<=45;i++){
        printf("%d  ",week_n[i]);
    }
    printf("\n\n");
}

void intialise(){
    for(int i=0;i<=45;i++){
        week[i]=999;
        week_n[i]=999;
    }
}

void fixedinput(){
    week[2]=6;      
    week[3]=6;
    week[7]=-5;
    week[8]=-5;
    week[9]=-5;
    week[18]=3;
    week[19]=3;
    week[23]=-3;
    week[24]=-3;
    week[34]=2;
    week[37]=7;
    week[38]=7;
    week[39]=7;
    week[42]=3;
    
    week_n[2]=0;      
    week_n[3]=0;
    week_n[7]=1;
    week_n[8]=1;
    week_n[9]=1;
    week_n[18]=2;
    week_n[19]=2;
    week_n[23]=3;
    week_n[24]=3;
    week_n[34]=4;
    week_n[37]=5;
    week_n[38]=5;
    week_n[39]=5;
    week_n[42]=6;
    
}

void getTasks(){
    task[0][0]=3; //Stress/Relief 
    task[0][1]=3;  //Duration
    task[0][2]=0;  //Allocated ? 
    
    task[1][0]=-1;
    task[1][1]=5;
    task[1][2]=0;
    
    task[2][0]=-2;
    task[2][1]=3;
    task[2][2]=0;
}

void PrintTasks(){
    printf("Tasks to be Allocated : \n");
    printf("S/R   Duration   Allocated\n");
    for(int i=0;i<=1;i++){
        for(int j=0;j<=2;j++){
            printf("%d  ",task[i][j]);
        }
        printf("\n");
    }
}

void AscendingSort(int countad){
    int temp,pair[2];
    for (int i = 0; i <=countad ; i++) {
        
        for (int j = i + 1; j <=countad; j++) { 
            
            if (sd[i] > sd[j]) {
                    
                    temp = sd[i];
                    sd[i] = sd[j];
                    sd[j] = temp;
                    
                    pair[0]=as[i*2];
                    pair[1]=as[i*2+1];
                    as[i*2]=as[j*2];
                    as[i*2+1]=as[j*2+1];
                    as[j*2]=pair[0];
                    as[j*2+1]=pair[1];
                    
                    temp=ad[i];
                    ad[i]=ad[j];
                    ad[j]=temp;
                    
                    pair[0]=s[i*2];
                    pair[1]=s[i*2+1];
                    s[i*2]=s[j*2];
                    s[i*2+1]=s[j*2+1];
                    s[j*2]=pair[0];
                    s[j*2+1]=pair[1];
                    
                }
            }
        }
        
   
}

void DescendingSort(int countad){
    int temp,pair[2];
    for (int i = 0; i <=countad ; i++) {
        
        for (int j = i + 1; j <=countad; j++) { 
            
            if (sd[i] < sd[j]) {
                    
                    temp = sd[i];
                    sd[i] = sd[j];
                    sd[j] = temp;
                    
                    pair[0]=as[i*2];
                    pair[1]=as[i*2+1];
                    as[i*2]=as[j*2];
                    as[i*2+1]=as[j*2+1];
                    as[j*2]=pair[0];
                    as[j*2+1]=pair[1];
                    
                    temp=ad[i];
                    ad[i]=ad[j];
                    ad[j]=temp;
                    
                    pair[0]=s[i*2];
                    pair[1]=s[i*2+1];
                    s[i*2]=s[j*2];
                    s[i*2+1]=s[j*2+1];
                    s[j*2]=pair[0];
                    s[j*2+1]=pair[1];
                    
                }
            }
        }
        
   
}
   
void AllocateTasks(int i){
    //prework befor allocating any task
    count = availibility();
    printavail(count);
    countad=calculatead(count);
    printad(countad);
    filled_c=getfilledallocations();
    PrintFilledAllocations(filled_c);
    SurroundingLevels(count);
    PrintSL(count);
    AvailBlockLevel(count);
    PrintABL(countad);
    
    
    //take tasks and assign them
    //1.Sort according to levels : Stress=> AscendingSort ; Relief=DescendingSort
    if(task[i][0]>=0){
        //Stress
        AscendingSort(countad);
        
    }
    else{
        //Relief
        DescendingSort(countad);
        printf("DescendingSort\n");
    }
    
        PrintABL(countad);
        printf("Sorted ");
        printavail(count);
        printf("Sorted ");
        printad(countad);
        printf("Sorted ");
        PrintSL(count);
        valid=check(countad);
        if(valid==999){
            //not allocated
            printf("Cannot be allocated\n");
            PrintTasks();

        }
        else{
            //allocated
            task[i][2]=1;
            PrintTasks();
            printf("Valid block : %d \n",valid);
            allocate(as[valid*2],as[valid*2+1],s[valid*2],s[valid*2+1],i);
            var_count++;
            print();        
        }
        
        printf("\n\n\n\n\n");
   
}
 
